(define (make-interval a b)
	(if (< a b)
		(cons a b)
		(cons b a)))

(define (mul-interval x y)
	(define (positive? t) (>= t 0))
	(define (negative? t) (< t 0))
	(let ((a (car x))
		  (b (cdr x))
		  (c (car y))
		  (d (cdr y)))
		(cond ((and (positive? a) (positive? c)) (display "condition 1:") (make-interval (* a c) (* b d)))
			  ((and (positive? a) (negative? c) (positive? d)) (display "condition 2:") (make-interval (* b c) (* b d)))
			  ((and (positive? a) (negative? c) (negative? d)) (display "condition 3:") (make-interval (* b c) (* a d)))
			  ((and (negative? a) (positive? b) (positive? c)) (display "condition 4:") (make-interval (* a d) (* b d)))
			  ((and (negative? a) (positive? b) (negative? c) (positive? d)) (display "condition 5:") (make-interval (min (* b c) (* a d)) (max (* a c) (* b d))))
			  ((and (negative? a) (positive? b) (negative? c) (negative? d)) (display "condition 6:") (make-interval (* b c) (* a c)))
			  ((and (negative? b) (negative? c) (positive? d)) (display "condition 7:") (make-interval (* a d) (* a c)))
			  ((and (negative? b) (negative? c) (negative? d)) (display "condition 8:") (make-interval (* b d) (* a c)))
			  (else (display "condition 9:") (make-interval (* a d) (* b c))))))
